plugins {
    id 'base'
    id 'com.moowork.node' version '1.3.1'
//    id 'com.github.node-gradle.node' version '2.2.3'
}
//buildscript {
//    repositories {
//        mavenLocal()
//        mavenCentral()
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//    }
//    dependencies {
//        classpath 'com.moowork.gradle:gradle-node-plugin:1.3.1'
//    }
//}
//apply plugin: 'base'
//apply plugin: 'com.moowork.node'

node {
    /* gradle-node-plugin configuration
       https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
       Task name pattern:
       ./gradlew npm_<command> Executes an NPM command.
    */
    version = '12.6.0'
    npmVersion = '6.9.0'
    download = true
}

//npm_run_build {
//    // make sure the build task is executed only when appropriate files change
//    inputs.files fileTree('public')
//    inputs.files fileTree('src')
//
//    // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
//    // though 'package.json' and 'package-lock.json' should be enough anyway
//    inputs.file 'package.json'
//    inputs.file 'package-lock.json'
//
//    outputs.dir 'build'
//}

task packageNpmApp(type: Zip) {
    dependsOn npm_run_build
    baseName "${rootProject.ngArtifact}"
    extension 'jar'
    destinationDir file("${projectDir}/dist")
    from('build') {
        // optional path under which output will be visible in Java classpath, e.g. static resources path
        into 'static'
    }
}

configurations {
    npmResources
}
configurations.default.extendsFrom(configurations.npmResources)
assemble.dependsOn packageNpmApp

artifacts {
    npmResources(packageNpmApp.archivePath) {
        builtBy packageNpmApp
        type "jar"
    }
}

String testsExecutedMarkerName = "${projectDir}/.tests.executed"

task test(type: NpmTask) {
    dependsOn assemble

    // force Jest test runner to execute tests once and finish the process instead of starting watch mode
    environment CI: 'true'

    args = ['run', 'test']

    inputs.files fileTree('src')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    // allows easy triggering re-tests
    doLast {
        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
    }
    outputs.file testsExecutedMarkerName
}

check.dependsOn test

clean {
    delete packageNpmApp.archivePath
    delete file("${projectDir}/dist")
}
