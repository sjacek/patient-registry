import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'org.springframework.boot'
    id 'org.openapi.generator' version "$openApiGeneratorVersion"
}

ext {
    openapiGeneratedDir = "${buildDir}/generated/openapi" as GStringImpl
    patientYmlFile = "$rootDir/openapi/patients-gui.yml" as GStringImpl
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
//apply plugin: 'spring-boot'
//apply plugin: 'io.spring.dependency-management'

sourceSets {
    generated {
        java {
            srcDirs { "${openapiGeneratedDir}/src/main/java" }
        }
        resources {
            srcDirs { "${openapiGeneratedDir}/resources" }
        }
    }
}

compileJava.source sourceSets.main.java, sourceSets.generated.java

dependencies {
    compile project(':model-mongodb')

    compile "org.springframework:spring-core:${springVersion}"
    compile 'org.springframework:spring-webmvc:${springVersion}'
    compile "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
//    runtime 'org.springframework.boot:spring-boot-properties-migrator:${springBootVersion}'
    compile "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    compile "org.springframework.data:spring-data-commons:${springBootVersion}"

    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.9'


    compile 'ch.ralscha:extdirectspring:1.8.1'
    compile 'ch.rasc:extclassgenerator-annotations:1.0.10'
    compile 'eu.bitwalker:UserAgentUtils:1.21'
    compile 'org.unbescape:unbescape:1.1.6.RELEASE'
    compile 'commons-codec:commons-codec:1.12'
    compile 'com.samskivert:jmustache:1.15'
    compile 'de.danielbechler:java-object-diff:0.95'
    compile 'com.google.zxing:javase:3.4.0'
    compile 'ch.rasc:constgen:1.0.3'
    compile 'ch.rasc:bsoncodec:1.0.1'
    compile 'ch.rasc:bsoncodec-apt:1.0.6'
    compile 'com.opencsv:opencsv:4.6'
    compile 'javax:javaee-api:8.0.1'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'com.itextpdf:itextpdf:5.5.13.1'
    compile 'org.apache.poi:poi:4.1.0'
    compile 'net.sf.supercsv:super-csv:2.4.0'
    compile 'org.projectlombok:lombok:1.18.8'
    compile 'org.jetbrains:annotations:17.0.0'

    testCompile 'junit:junit:4.12'
    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

    compile "org.codehaus.groovy:groovy-all:2.5.7"
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
    compileOnly 'org.immutables:value:2.7.5'
//    compileOnly 'com.querydsl:querydsl-apt:4.2.1'

    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'
    compile group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.1.0'

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.9.3"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.6"    // allows mocking of classes without default constructor (together with CGLIB)
}

group = 'com.grinnotech.patients'
version = '0.0.1'
description = 'Patients Registry Backend'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Builds a Kotlin client by default.
openApiGenerate {
    generatorName = "spring"
    inputSpec = "${patientYmlFile}".toString()
    outputDir = "${openapiGeneratedDir}".toString()
    apiPackage = "com.grinnotech.patients.api"
    invokerPackage = "com.grinnotech.patients.api.invoker"
    modelPackage = "com.grinnotech.patients.api.model"
    configOptions = [
            dateLibrary: "java8"
    ]
    systemProperties = [
            modelDocs: "true"
    ]
    additionalProperties = [
            interfaceOnly: "true",
            useOptional: "true"
    ]
    skipValidateSpec = true
//    logToStderr = true
    generateAliasAsModel = false
    // set to true and set environment variable {LANG}_POST_PROCESS_FILE
    // (e.g. SCALA_POST_PROCESS_FILE) to the linter/formatter to be processed.
    // This command will be passed one file at a time for most supported post processors.
    enablePostProcessFile = false
}
compileJava.dependsOn("openApiGenerate")

idea {
    module {
        generatedSourceDirs += file("${openapiGeneratedDir}/src/main/java")
    }
}

//task validateGoodSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
//    inputSpec = "${patientYmlFile}".toString()
//}
//
//task validateBadSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
//    inputSpec = "${patientYmlFile}".toString()
//}
//
//task validateSpecs(dependsOn: ['validateGoodSpec', 'validateBadSpec'])
