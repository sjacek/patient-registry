import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'org.springframework.boot'
    id 'org.openapi.generator' version "$openApiGeneratorVersion"
    id 'io.spring.dependency-management'
}

ext {
    openapiGeneratedDir = "${buildDir}/generated/openapi" as GStringImpl
    patientYmlFile = "${rootDir}/openapi/patients-gui.yml" as GStringImpl
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'

group = 'com.grinnotech.patients'
version = '0.0.1'
description = 'Patients Registry Backend'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    generated {
        java {
            srcDirs { "${openapiGeneratedDir}/src/main/java" }
        }
        resources {
            srcDirs { "${openapiGeneratedDir}/resources" }
        }
    }
}

compileJava.source sourceSets.main.java, sourceSets.generated.java

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':backend:model-mongodb')

    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.springframework:spring-webmvc:${springVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-elasticsearch:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-hateoas:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-quartz:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"
    implementation "org.springframework.session:spring-session-core:2.2.2.RELEASE"

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'com.unboundid:unboundid-ldapsdk:5.0.1'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'
    testImplementation 'io.projectreactor:reactor-test:3.3.5.RELEASE'
    testImplementation 'org.springframework.security:spring-security-test:5.3.1.RELEASE'

    implementation 'ch.ralscha:extdirectspring:1.8.1'
    implementation 'ch.rasc:extclassgenerator-annotations:1.0.10'
    implementation 'eu.bitwalker:UserAgentUtils:1.21'
    implementation 'org.unbescape:unbescape:1.1.6.RELEASE'
    implementation 'commons-codec:commons-codec:1.12'
    implementation 'com.samskivert:jmustache:1.15'
    implementation 'de.danielbechler:java-object-diff:0.95'
    implementation 'com.google.zxing:javase:3.4.0'
    implementation 'ch.rasc:constgen:1.0.3'
    implementation 'ch.rasc:bsoncodec:1.0.1'
    implementation 'ch.rasc:bsoncodec-apt:1.0.6'
    implementation 'com.opencsv:opencsv:4.6'
    implementation 'javax:javaee-api:8.0.1'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'com.itextpdf:itextpdf:5.5.13.1'
    implementation 'org.apache.poi:poi:4.1.0'
    implementation 'net.sf.supercsv:super-csv:2.4.0'
    implementation 'org.jetbrains:annotations:17.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation "org.codehaus.groovy:groovy-all:2.5.11"
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    compileOnly 'org.immutables:value:2.7.5'
//    compileOnly 'com.querydsl:querydsl-apt:4.2.1'

    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.9'
//    implementation 'javax.validation:validation-api'

    // optional dependencies for using Spock
    testImplementation "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"          // allows mocking of classes (in addition to interfaces)
    testRuntimeOnly "org.objenesis:objenesis:2.6"    // allows mocking of classes without default constructor (together with CGLIB)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "${patientYmlFile}".toString()
    outputDir = "${openapiGeneratedDir}".toString()
    apiPackage = "com.grinnotech.patients.api"
    invokerPackage = "com.grinnotech.patients.api.invoker"
    modelPackage = "com.grinnotech.patients.api.model"
    configOptions = [
            dateLibrary: "java8"
    ]
    systemProperties = [
            modelDocs: "true"
    ]
    additionalProperties = [
            interfaceOnly: "true",
            useOptional: "true"
    ]
    skipValidateSpec = true
//    logToStderr = true
    generateAliasAsModel = false
    // set to true and set environment variable {LANG}_POST_PROCESS_FILE
    // (e.g. SCALA_POST_PROCESS_FILE) to the linter/formatter to be processed.
    // This command will be passed one file at a time for most supported post processors.
    enablePostProcessFile = false
}
compileJava.dependsOn("openApiGenerate")

idea {
    module {
        generatedSourceDirs += file("${openapiGeneratedDir}/src/main/java")
    }
}

//task validateGoodSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
//    inputSpec = "${patientYmlFile}".toString()
//}
//
//task validateBadSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
//    inputSpec = "${patientYmlFile}".toString()
//}
//
//task validateSpecs(dependsOn: ['validateGoodSpec', 'validateBadSpec'])
