buildscript {
    repositories {

        mavenCentral()
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.7"
    }
}

plugins {
    id 'java'
//    id 'maven'
    id 'com.ewerk.gradle.plugins.annotation-processor' version '1.0.4'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.9"
}

group = 'com.grinnotech.patients'
version = '0.0.1'
description = 'Patients Registry Data Model - MongoDb'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.ewerk.gradle.plugins.querydsl'

repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

//sourceSets {
//    main {
//        // Fixes problem with JPA EntityManager factory requiring classes and persistence.xml in same path
//        output.resourcesDir = output.classesDir
//    }
//}

sourceSets {
    generated.java
    main.java.srcDirs += generated.java.srcDirs
}

configurations {
//    springAgent
    querydslapt
}

dependencies {
//    querydslapt "com.querydsl:querydsl-apt:4.2.1"

    compile 'org.mongodb:mongodb-driver:3.4.2'
    compile 'org.hibernate:hibernate-validator:5.3.5.Final'
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.5.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:1.5.3.RELEASE'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.8'
    compile 'org.springframework.boot:spring-boot-starter-mail:1.5.3.RELEASE'
    compile 'org.springframework:spring-webmvc:4.3.8.RELEASE'
    compile 'ch.ralscha:extdirectspring:1.7.3'
    compile 'ch.rasc:extclassgenerator-annotations:1.0.10'
    compile 'eu.bitwalker:UserAgentUtils:1.20'
    compile 'org.unbescape:unbescape:1.1.5.RELEASE'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.samskivert:jmustache:1.13'
    compile 'de.danielbechler:java-object-diff:0.94'
    compile 'org.springframework.boot:spring-boot-configuration-processor:1.5.3.RELEASE'
    compile 'com.google.zxing:javase:3.3.1'
    compile 'ch.rasc:constgen:1.0.3'
    compile 'ch.rasc:bsoncodec:1.0.1'
    compile 'ch.rasc:bsoncodec-apt:1.0.5'
    compile 'org.springframework.data:spring-data-mongodb:1.10.3.RELEASE'
    compile 'com.opencsv:opencsv:4.1'
    compile 'javax:javaee-api:7.0'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'com.itextpdf:itextpdf:5.5.12'
//    providedCompile "com.mysema.querydsl:querydsl-apt:3.7.4"
//    providedCompile group: 'com.mysema.querydsl', name: 'querydsl-apt', version: '3.7.4'
//    compile "com.mysema.querydsl:querydsl-apt:3.7.4"
    compile 'com.querydsl:querydsl-mongodb:4.2.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.5.3.RELEASE'
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5'
    compileOnly 'org.immutables:value:2.5.6'
    compileOnly 'com.querydsl:querydsl-apt:4.1.4'
    compileOnly 'org.projectlombok:lombok:1.16.16'
}

annotationProcessor {
  library "com.querydsl:querydsl-apt:4.2.1"
  processor 'com.querydsl.apt.morphia.MorphiaAnnotationProcessor'
  sourcesDir 'src/morphia/java'
}

querydsl {
  springDataMongo = true

  library = 'com.querydsl:querydsl-apt'
  querydslSourcesDir = 'src/querydsl/java'

  jpa = true
//  jdo = false
//  hibernate = false
//  morphia = false
//  roo = false
  springDataMongo = true
  querydslDefault = true
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    classpath += sourceSets.main.runtimeClasspath
}

//test {
//    jvmArgs = ["-javaagent:$configurations.springAgent.singleFile"]
//    systemProperty 'spring.profiles.active', 'jpa-hibernate'
//    if (logger.infoEnabled) {
//        testLogging.showStandardStreams = true
//    }
//}

//task testMongo(type: Test, dependsOn: [classes, testClasses]) {
//    jvmArgs = ["-javaagent:$configurations.springAgent.singleFile"]
//    systemProperty 'spring.profiles.active', 'mongo'
//    if (logger.infoEnabled) {
//        testLogging.showStandardStreams = true
//    }
//}

//check.dependsOn testMongo
